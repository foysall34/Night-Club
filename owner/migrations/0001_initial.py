# Generated by Django 5.2.5 on 2025-10-09 08:45

import django.db.models.deletion
import django.utils.timezone
import owner.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClubType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LegalContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('privacy_policy', 'Privacy Policy'), ('terms_of_service', 'Terms of Service')], help_text='The type of the legal document.', max_length=20, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField(help_text='The main content of the document. You can use HTML for formatting.')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Legal Content',
                'verbose_name_plural': 'Legal Contents',
                'ordering': ['content_type'],
            },
        ),
        migrations.CreateModel(
            name='Vibes_Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClubOwner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('full_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('venue_name', models.CharField(max_length=255)),
                ('venue_address', models.CharField(max_length=255)),
                ('link', models.CharField(blank=True, default='link', max_length=300, null=True)),
                ('profile_image', models.FileField(upload_to='proofs/images/')),
                ('id_front_page', models.FileField(upload_to='proofs/ids/')),
                ('id_back_page', models.FileField(upload_to='proofs/ids/')),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('otp', models.CharField(blank=True, max_length=4, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, related_name='club_owner_set', related_query_name='club_owner', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='club_owner_permissions_set', related_query_name='club_owner', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Club Owner',
                'verbose_name_plural': 'Club Owners',
            },
        ),
        migrations.CreateModel(
            name='ClubProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clubName', models.CharField(blank=True, max_length=255, null=True)),
                ('dressCode', models.CharField(blank=True, max_length=255)),
                ('ageRequirement', models.CharField(blank=True, max_length=100)),
                ('coverCharge', models.CharField(blank=True, max_length=255)),
                ('clubImageUrl', models.ImageField(blank=True, max_length=500, null=True, upload_to='clubs/images/')),
                ('features', models.JSONField(default=dict)),
                ('events', models.JSONField(default=dict)),
                ('practicalInfo', models.JSONField(default=dict)),
                ('contact', models.JSONField(default=dict)),
                ('weekly_hours', models.JSONField(default=owner.models.get_default_weekly_hours)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='club_profile', to=settings.AUTH_USER_MODEL)),
                ('club_type', models.ManyToManyField(blank=True, to='owner.clubtype')),
                ('vibes_type', models.ManyToManyField(blank=True, to='owner.vibes_choice')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Event Name')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('entry_fee', models.CharField(blank=True, help_text='e.g., $20 or Free', max_length=100)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('live', 'Live')], default='draft', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_events', to='owner.clubprofile')),
            ],
            options={
                'ordering': ['-date', '-time'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('full_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('otp', models.CharField(blank=True, max_length=4, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
